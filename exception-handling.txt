Handling checked exceptions tends to make Java code more verbose, less readable and more difficult to maintain. The general trend in the industry is to move away from the extensive creation of checked exceptions in an API or framework. 

Unexpected errors: they should not happen but they happen
  Application Runtime error: the application internal error that happens in runtime in the application we are responsible for. Category:APP_ERROR
    Examples: ArrayIndexOutOfBoundsException, NullPointerException, IllegalArgumentException, IOException (it is not a RuntimeException)
    Use generic error code identifying our app, e.g. ABC_999
  Data validation error: the error is caused by another application we are not responsible for. In other words, it is a programming error in other team's applications. 
    For example, teh database query does not returns order details record, or remote call does not return the transaction details. Using a generic error code
    idenfigying the app, e.g. DB_99, CRM_999. (However, in some cases, it is normnal business scenario where DB or remote system returns empty list.)
    Category: DATA_ERROR
  Unhandled server exception from a dependency: HTTP 500. Use error code like CRM_HTTP500. HTTP error could also come from HTTP server due to HTTP server 
    configuration error. Category: DEPENENCY_UNHANDLED_ERROR
  Missing HTTP resources: HTTP 404. (could be client side configuration error, or missing server side HTTP resources or server side application not deployed/running)
    Category: APP_ERROR
  HTTP 400: Category: APP_ERROR
  HTTP 403: Category: APP_ERROR
  
Expected errors: the erro makes sense for the business people. Use a specific error code for each case.
  User input validation error (business validation error). Category:USER_INPUT_ERROR
  Dependency handled error. Category: DEPENENCY_HANDLED_ERROR
  Remote call timeout, e.g. CRM_TIMEOUT.  Category: TIMEOUT_ERROR
  Connection error: java.net.ConnectException: Connection refused: connect. CRM_CONNECTION_REFUSED. Category: CONN_ERROR
  SSL error: certificate issues. Category: SSL_ERROR
  Authentication error HTTP 401. Category: AUTH_ERROR
  Network error: HTTP 502, 503, 504. Use erro cdoe like CRM_HTTP502, CRM_HTTP503, etc. Category: NETWORK_ERROR

Error Handling strategy:
  Unexpected errors (APP_ERROR,DATA_ERROR, DEPENENCY_UNHANDLED_ERROR): Dev team need to investigate immediately. Nedd to have a data error source field ot identify which team.
  Expected errors: 
    USER_INPUT_ERROR: No action
    SSL_ERROR: Dev team action
    AUTH_ERROR: May need to check auth configuration
    TIMEOUT_ERROR, CONN_ERROR, NETWORK_ERROR: DevOps/Infrature team action if persisting
    DEPENENCY_HANDLED_ERROR: if the error code is generic, dev team takes action.
    
Assume we are calling a API named "ABC", we may use the table below to map errors.

HTTP status   Error             User Problem?   Dev Problem?    Operation Problem?    Error Code    ABC Response body
200                                                                                                 {"id": "123", "status":"success"}
200                                                                                   ABC_ABC001    {"id": "123", "status":"false", "errorCode":"ABC001", "ErrorMessage":"Invalid amount"}
400                             N               Y               N                     ABC_HTTP400
401                             Y               Y               Y                     ABC_HTTP401           
403                             N               Y               Y                     ABC_HTTP403                                              
404                             Y               Y               N                     ABC_HTTP404
500                             N               Y               N                     ABC_HTTP500
501                             N               Y               N                     ABC_HTTP501
502                             N               N               Y                     ABC_HTTP502
503                             N               Y               Y                     ABC_HTTP503 
504                             N               N               Y                     ABC_HTTP504
            Timeout             N               N               Y                     ABC_TIMEOUT
            Unreachable         N               Y               Y                     ABC_CONN
            Connection refused  N               Y               Y                     ABC_CONN
            SSL error           N               Y               N                     

Further thought

We have to think about how JVM and third-party libraries throw/handle exceptions

Java checked exception (File not found, no file write permission, parser error) should be considered as a type
of expected system exceptions (because we know they could happen). Can optionally assign an "internal error code",
which is mapped to a generic error code when returned to the client.

Java runtime exception (e.g. nullpointerexception) is a unexpected exception (they should not happen) and s
hould always be assigned a generic error code. This could be a programming error, or a data error coming from 
another system.

Third-party runtime exceptions caused by java checked exceptions (e.g. Spring resourceexception) should be 
considered as a type of expected system exceptions (because we know they could happen). Can optionally assign 
an "internal error code", which is mapped to a generic error code when returned to the client.

Third-party runtime exceptions caused by java runtime exceptions is a unexpected exception (they should not 
happen) and should always be assigned a generic error code.

Technical validation exceptions: application exceptions. Can optionally assign an "internal error code",
which is mapped to a generic error code when returned to the client.

Business validation errors: User errors. Assign a unique error code.

Downstream errors:should fall into one of the above categories. Responses to the client needs to indicate that 
this is a downstream error.

Summary:
generic error code 1: unexpected exceptions, without internal error code (not worth assigning an error code)
generic error code 2: expected system/application exceptions, optionally assigned an internal error code.

Further thoughts
  Validation errors: users need to take actions
  Operational errors: support team need to take action
    Timeout
    Cert expired
  Programming errors: programmers need to take actions
    coding errors and configuration errors. 
    could be caused by unexpected runtime exception like NPE. 
    could be also caused by cheked exceptions.
  Data issues: 
    could be an operational error, e.g. a batch did not run
    could be also a progamming error in the batch scripts.
    In non-prod systems, this could be data provisioning error.

Oracle recommendation:
Here's the bottom line guideline: If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.

Programmers' thoughts:
Recoverable does not mean that the application can do something to resolve the cause of the exception, though there may be cases where this is possible.


2023.10.15
In a controller-service-restclient archiectture, if ex is caught in the resetcleint layer, one can log the outgoing request header, 
payload, and downstream URL. In controllerAdvice, one can log the incoming request header, payload, and the endpoint URL of this service.

BTW, it is a good idea to log the above info at debugging level, in DEV and SIT environments.


Normally, there is no need to wrap the ex in another exception class, unless it adds obvious benefits, e.g., one need to handle that error
between restcleint and controllerAdvice for a specific scenario.

2024.04.21
Each microservice normally needs one custom RuntimeException class for
  Validation errors for the client requests,
  Validation errors for the successful responses from the downstream systems.
Need a bit strong argument to add extra custom RuntimeException classes to MS.
  Each such custom RuntimeException class needs some unique logic to handle
Generally no need to define framework level custom RuntimeException classes that wrap the unchecked exceptions.
Do need framework level custom RuntimeException classes to wrap the checked exceptions.
  Follow the industry trend of using RuntimeException slasses.
Frameworks (as created for all MSs in an organization) should catch and log the request (headers and body) and response.
  Re-throw the original unchecked exceptions (leaving them for MSs to handle, e.g., using rrtry or circuit breakers)
  Wrap the checked exception in a custom RuntimeException.
MS should catch all unexpected exceptions at the controller layer and return a generic error code to the client.
  No need for a unique error code for each unexpected exception.
  
